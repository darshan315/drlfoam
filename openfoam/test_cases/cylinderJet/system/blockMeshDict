/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1912                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

lengthX 2.2;
lengthY 0.41;

thickness 0.01; //#calc "$lengthX / $blocksX";
Ox   0.2;
Oy   0.2;
blocks 40;
blocks2 #eval{ round((($lengthX-$Ox * 2)) / ($Ox * 2) * $blocks)};

jetAngle 3;

mshAngle 45;

scale   1;

// points on cylinder (circle)
P    0.2;
Q    0.21;
R    0.05;
  
jet   #eval "degToRad($jetAngle)";
msh   #eval "degToRad($mshAngle)";

xl1o  #eval "$Ox + ($P * tan($jet))";      //
xl2o  #eval "$Ox - ($P * tan($jet))";      //
   
xu1o  #eval "$Ox + ($Q * tan($jet))";      //
xu2o  #eval "$Ox - ($Q * tan($jet))";      //

xAo   #eval "$Ox + ($P * tan($msh))";      
xDo   #eval "$xAo + 0";      //
   
xA    #eval "$Ox + ($R * sin($msh))";      //
yA    #eval "$Oy - ($R * cos($msh))";      //
xB    #eval "$Ox - ($R * sin($msh))";      //
yB    #eval "$Oy - ($R * cos($msh))";      //
xC    #eval "$Ox - ($R * sin($msh))";      //
yC    #eval "$Oy + ($R * cos($msh))";      //
xD    #eval "$Ox + ($R * sin($msh))";      //
yD    #eval "$Oy + ($R * cos($msh))";      //
       
xl1   #eval "$Ox + ($R * sin($jet))";      //
yl1   #eval "$Oy - ($R * cos($jet))";      //
xl2   #eval "$Ox - ($R * sin($jet))";      //
yl2   #eval "$Oy - ($R * cos($jet))";      //
  
xu1   #eval "$Ox + ($R * sin($jet))";      //
yu1   #eval "$Oy + ($R * cos($jet))";      //
xu2   #eval "$Ox - ($R * sin($jet))";      //
yu2   #eval "$Oy + ($R * cos($jet))";      //


geometry
{
    cylinder
    {
        type    searchableCylinder;
        point1  ($Ox $Oy -0.12);
        point2  ($Ox $Oy 0.12);
        radius  0.05;
    }
}


vertices #codeStream
{
    codeInclude
    #{
        #include "pointField.H"
    #};

    code
    #{
        pointField points({
            	/* 0 */ {0, 0, 0},
            	/* 1 */ {$xl2o, 0, 0},
            	/* 2 */ {$xl1o, 0, 0},
            	/* 3 */ {$xAo, 0, 0},
            	/* 4 */ {$lengthX, 0, 0},
            	/* 5 */ {$lengthX, $lengthY, 0},
            	/* 6 */ {$xDo, $lengthY, 0},
            	/* 7 */ {$xu1o, $lengthY, 0},
            	/* 8 */ {$xu2o, $lengthY, 0},
            	/* 9 */ {0, $lengthY, 0},
            	/* 10*/ {$xB, $yB, 0},
            	/* 11*/ {$xl2, $yl2, 0},
            	/* 12*/ {$xl1, $yl1, 0},
            	/* 13*/ {$xA, $yA, 0},
            	/* 14*/ {$xD, $yD, 0},
            	/* 15*/ {$xu1, $yu1, 0},
            	/* 16*/ {$xu2, $yu2, 0},
            	/* 17*/ {$xC, $yC, 0}
	 });
	 
        // Duplicate z points for thickness
        const label sz = points.size();
        points.resize(2*sz);
        for (label i = 0; i < sz; ++i)
        {
            const point& pt = points[i];
            points[i + sz] = point(pt.x(), pt.y(), $thickness);
        }

        os  << points;
    #};
};

blocks
(
    hex (0 1 11 10 18 19 29 28) ($blocks $blocks 1) 
    edgeGrading (0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 1 1 1 1)
    
    hex (1 2 12 11 19 20 30 29) (15 $blocks 1) 
    edgeGrading (1 1 1 1 0.2 0.2 0.2 0.2 1 1 1 1)
    
    hex (2 3 13 12 20 21 31 30) ($blocks $blocks 1) 
    edgeGrading (5 5 5 5 0.2 0.2 0.2 0.2 1 1 1 1)
    
    hex (3 4 5 6 21 22 23 24) ($blocks2 $blocks 1) simpleGrading (1 1 1)
    
    hex (3 6 14 13 21 24 32 31) ($blocks $blocks 1) 
    edgeGrading (1 1 1 1 0.2 0.2 0.2 0.2 1 1 1 1)
    
    hex (0 10 17 9 18 28 35 27) ($blocks $blocks 1) 
    edgeGrading (0.2 0.2 0.2 0.2 1 1 1 1 1 1 1 1)
    
    hex (9 17 16 8 27 35 34 26) ($blocks $blocks 1) 
    edgeGrading (0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 1 1 1 1)
    
    hex (7 8 16 15 25 26 34 33) (15 $blocks 1) 
    edgeGrading (1 1 1 1 0.2 0.2 0.2 0.2 1 1 1 1)
    
    hex (6 7 15 14 24 25 33 32) ($blocks $blocks 1) 
    edgeGrading (0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 1 1 1 1)
);

edges
(
    project 12 13 (cylinder)          // 
    project 30 31 (cylinder)          // 
    
    project 13 14 (cylinder)          // 
    project 31 32 (cylinder)          // 

    project 14 15 (cylinder)          // 
    project 32 33 (cylinder)          // 

    project 15 16 (cylinder)          // 
    project 33 34 (cylinder)          // 

    project 16 17 (cylinder)          // 
    project 34 35 (cylinder)          // 
    
    project 17 10 (cylinder)          // 
    project 35 28 (cylinder)          // 
    
    project 10 11 (cylinder)          // 
    project 28 29 (cylinder)          // 
    
    project 11 12 (cylinder)          // 
    project 29 30 (cylinder)          // 
    
    //arc 11 12 ($domain.Ox $domain.arc1 0)
    //arc 15 16 ($domain.Ox $domain.arc2 0)
    //arc 29 30 ($domain.Ox $domain.arc1 $thickness)
    //arc 33 34 ($domain.Ox $domain.arc2 $thickness)    
);

boundary
(
    jEt
    {
        type patch;
        faces
        (
            (15 16 33 34)
            (11 12 30 29)
        );
    }
   
    top
    {
        type patch;
        faces
        (
            (9 8 27 26)
            (5 6 23 24)
            (6 7 24 25)
            (7 8 25 26)
        );
    }
    bottom
    {
        type patch;
        faces
        (
            (0 1 18 19)
            (1 2 19 20)
            (2 3 20 21)
            (3 4 21 22)
        );
    }
    inlet
    {
        type patch;
        faces
        (
            (0 9 27 18)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (4 5 22 23)
        );
    }
    back
    {
        type empty;
        faces
        (
            (26 27 35 34)
            (25 26 33 34)
            (24 25 33 32)
            (21 24 31 32)
            (21 22 23 24)
            (20 21 31 30)
            (19 20 30 29)
            (18 19 29 28)
            (18 28 35 27)
        );
    }
    front
    {
        type empty;
        faces
        (
            (3 4 5 6)
            (0 1 11 10)
            (1 2 12 11)
            (2 3 13 12)
            (3 6 14 13)
            (0 10 17 9)
            (6 7 15 14)
            (7 8 16 15)
            (8 9 17 16)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
