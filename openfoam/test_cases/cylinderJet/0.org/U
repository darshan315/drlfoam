/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  com                                   |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    arch        "LSB;label=32;scalar=64";
    location    "0";
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [ 0 1 -1 0 0 0 0 ];

internalField   uniform ( 0 0 0 );

boundaryField
{
    inlet
    {
        type            fixedValue;
        value           uniform (1 0 0);
    }

    outlet
    {
        type            zeroGradient;
    }

    jEt_up
    {
	type		codedFixedValue;
	value		uniform (0 0.05 0);
	
	name		parabolic_Vel_u;
	code
	#{
			const vectorField& Cf = patch().Cf();
			vectorField& field = *this;
			
			const scalar c = 0.2;
			const scalar r = 0.00523359562429438327221186296090;
			const scalar Umax = 5;
			
			forAll(Cf, faceI)
			{
				const scalar x = Cf[faceI][0];
				const scalar y = Cf[faceI][1];
				
				field[faceI] = vector (0,Umax*(1-(pow((x-c)/r,2))/2),0);
			}
	#};
    }

    jEt_lw
        {
	type		codedFixedValue;
	value		uniform (0 0.05 0);
	
	name		parabolic_Vel_l;
	code
	#{
			const vectorField& Cf = patch().Cf();
			vectorField& field = *this;
			
			const scalar c = 0.2;
			const scalar r = 0.00523359562429438327221186296090;
			const scalar Umax = 5;
			
			forAll(Cf, faceI)
			{
				const scalar x = Cf[faceI][0];
				const scalar y = Cf[faceI][1];
				
				field[faceI] = vector (0,-1*Umax*(1-(pow((x-c)/r,2))/2),0);
			}
	#};
    }

    "(cylinder|top|bottom)"
    {
        type            noSlip;
    }

    "(front|back)"
    {
        type            empty;
    }
}


// ************************************************************************* //
